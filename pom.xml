<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>knowledge</artifactId>
    <!-- 父项目的packing必须为pom -->
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <description>探险家</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <!--解决idea自动重置，language-level问题-->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <modules>
        <module>activemq-college</module>
        <module>aliyun-vue</module>
        <module>springmvc-annotation-college</module>
        <module>AA-Test</module>
        <module>diy-spring-boot-starter-autoconfig</module>
        <module>docker-college</module>
        <module>guava-college</module>
        <module>httpclient-college</module>
        <module>java8-college</module>
        <module>java9-11-12-13-14</module>
        <module>datastructure-college</module>
        <module>jvm-college</module>
        <module>safe-college</module>
        <module>javaspi-college</module>
        <module>servlet3-college</module>
        <module>chang-common</module>
        <module>snowflake-college</module>
        <module>multi-thread-memory-model</module>
        <module>dubbo-college</module>
        <module>study-spring-cloud</module>
        <module>hello-spring-cloud</module>
        <module>seata-college</module>
        <module>zipkin-college</module>
        <module>log-mdc-college</module>
    </modules>


    <!-- dependencies即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）。-->
    <!-- dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖，-->
    <!-- 如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项(指定groupId和artifactId)，并且没有指定具体版本，-->
    <!-- 才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。-->
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.4.2</version>
            <scope>compile</scope>
        </dependency>
        <!--常用工具包，共三个-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.10</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>28.2-android</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.8.0</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.18</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.70</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.11.1</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.11.1</version>
        </dependency>
        <!--Java8+ 函数编程增强库-->
        <dependency>
            <groupId>io.vavr</groupId>
            <artifactId>vavr</artifactId>
            <version>0.10.3</version>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.2</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.14</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>1.8</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>5.2.7.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.4</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>commons-betwixt</groupId>
            <artifactId>commons-betwixt</artifactId>
            <version>0.8</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-email</artifactId>
            <version>1.5</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>1.19</version>
        </dependency>
    </dependencies>


    <!-- dependencies即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）。-->
    <!-- dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖，-->
    <!-- 如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项(指定groupId和artifactId)，并且没有指定具体版本，-->
    <!-- 才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>okhttp</artifactId>
                <version>3.10.0</version>
            </dependency>
            <!-- 一个项目设置多个parent的方法，(type=pom)并且(scope=import)-->
            <!--  <dependency>-->
            <!--      <groupId>xxx.xxx.xxx</groupId>-->
            <!--      <artifactId>xxx-xxx</artifactId>-->
            <!--      <version>x.x.x</version>-->
            <!--      <type>pom</type>-->
            <!--      <scope>import</scope>-->
            <!--  </dependency>-->
        </dependencies>
    </dependencyManagement>


    <!-- 父项目插件管理，可供子项目继承 -->
    <!-- plugins 和 pluginManagement 的区别，-->
    <!-- 和我们前面研究过的 dependencies 和 dependencyManagement 的区别是非常类似的。-->
    <!-- plugins 下的 plugin 是真实使用的，而 pluginManagement 下的 plugins 下的 plugin 则仅仅是一种声明，-->
    <!-- 子项目中可以对 pluginManagement 下的 plugin 进行信息的选择、继承、覆盖等。-->
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.1</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


    <!-- Maven远程仓库设置，非必要，可以删除-->
    <!-- 在POM中配置远程仓库-->
    <!-- 前面我们看到超级POM配置了ID为central的远程仓库，我们可以在POM中配置其它的远程仓库。-->
    <!-- 这样做的原因有很多，比如你有一个局域网的远程仓库，使用该仓库能大大提高下载速度，-->
    <!-- 继而提高构建速度，也有可能你依赖的一个jar在central中找不到，它只存在于某个特定的公共仓库，-->
    <!-- 这样你也不得不添加那个远程仓库的配置。-->
    <repositories>
        <repository>
            <id>public</id>
            <name>aliyun nexus</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>


    <!--Maven远程插件库设置，非必要，可以删除-->
    <!-- 在POM中配置远程插件仓库-->
    <!-- 前面我们看到超级POM配置了ID为central的远程仓库，我们可以在POM中配置其它的远程仓库。-->
    <!-- 这样做的原因有很多，比如你有一个局域网的远程仓库，使用该仓库能大大提高下载速度，-->
    <!-- 继而提高构建速度，也有可能你依赖的一个jar在central中找不到，它只存在于某个特定的公共仓库，-->
    <!-- 这样你也不得不添加那个远程仓库的配置。-->
    <pluginRepositories>
        <pluginRepository>
            <id>public</id>
            <name>aliyun nexus</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>


</project>