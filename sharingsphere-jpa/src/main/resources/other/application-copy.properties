server.port=8072
#spring.main.allow-bean-definition-overriding=true就是解决bean重复定义的。设置为true时，后定义的bean会覆盖之前定义的相同名称的bean。
spring.main.allow-bean-definition-overriding=true
#jpa配置
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=mysql
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
# 打开sql输出日志
spring.shardingsphere.props.sql.show=true
#datasource-name
spring.shardingsphere.datasource.names=ds0,ds1,ds2
#配置数据源
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.url=jdbc:mysql://localhost:3306/ds0?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&maxReconnects=15000&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456

spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/ds1?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&maxReconnects=15000&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://localhost:3306/ds2?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&maxReconnects=15000&allowMultiQueries=true&useSSL=false
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=123456


# 默认数据源，未分片的表默认执行库
spring.shardingsphere.sharding.default-data-source-name=ds0


########### 分库策略 ##########
# 分库分片键
spring.shardingsphere.sharding.tables.t_user.database-strategy.standard.sharding-column=id
# ①分库分片算法(自定义)
spring.shardingsphere.sharding.tables.t_user.database-strategy.standard.precise-algorithm-class-name=com.example.sharingspherejpa.shardingalgorithm.MyDBPreciseShardingAlgorithm
# ②分库分片算法(表达式)
#spring.shardingsphere.sharding.tables.t_user.database-strategy.inline.algorithm-expression=ds$->{id % 3}




########### 分表策略 ###########
# 分表分片健
#spring.shardingsphere.sharding.tables.t_user.table-strategy.standard.sharding-column=id
# ①分表算法(自定义)
#spring.shardingsphere.sharding.tables.t_user.table-strategy.standard.precise-algorithm-class-name=com.example.sharingspherejpa.shardingalgorithm.MyTablePreciseShardingAlgorithm
# ②分表算法(表达式)
#spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user->{id % 3}




########## 指定t_user表里面主键id、生成策略、SNOWFLAKE ##########
spring.shardingsphere.sharding.tables.t_user.key-generator.column=id
spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_user.key-generator.props.worker.id=123
