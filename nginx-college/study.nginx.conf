########### 每个指令必须有分号结束。#################
#user administrator administrators;     #配置用户或者组，默认为nobody nobody。
#worker_processes 2;                    #允许生成的进程数，默认为1
#pid /nginx/pid/nginx.pid;              #指定nginx进程运行文件存放地址
error_log log/error.log debug;          #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg

events {
  accept_mutex on;      #设置网路连接序列化，防止惊群现象发生，默认为on
  multi_accept on;      #设置一个进程是否同时接受多个网络连接，默认为off
  #use epoll;           #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport
  worker_connections 1024;  #最大连接数，默认为512
}

http {
  include    mime.types;    #文件扩展名与文件类型映射表
  default_type application/octet-stream; #默认文件类型，默认为text/plain
  #access_log off;          #取消服务日志
  log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式
  access_log log/access.log myFormat;   #combined为日志格式的默认值
  sendfile on;                          #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。
  sendfile_max_chunk 100k;              #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
  keepalive_timeout 65;                 #连接超时时间，默认为75s，可以在http，server，location块。

  #负载均衡配置,下方Server标签引用
  upstream mysvr {
    server 127.0.0.1:7878;
    server 192.168.10.121:3333 backup; #热备
  }

  error_page 404 https://www.baidu.com; #错误页,可以是一个本地的HTML，也可以是一个网址

  server {
    keepalive_requests 120;     #单连接请求上限次数。
    listen    4545;             #监听端口
    server_name 127.0.0.1;      #监听地址
    location ~*^.+$ {           #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。
      #root path;       #根目录
      #index vv.txt;    #设置默认页
      proxy_pass http://mysvr; #请求转向mysvr 定义的服务器列表
      deny 127.0.0.1;       #拒绝的ip
      allow 172.18.5.54;    #允许的ip
    }
   }
}

#####################################################################################

#   1.$remote_addr  与$http_x_forwarded_for 用以记录客户端的ip地址；
#   2.$remote_user ：用来记录客户端用户名称；
#   3.$time_local ： 用来记录访问时间与时区；
#   4.$request ： 用来记录请求的url与http协议；
#   5.$status ： 用来记录请求状态；成功是200，
#   6.$body_bytes_sent ：记录发送给客户端文件主体内容大小；
#   7.$http_referer ：用来记录从那个页面链接访问过来的；
#   8.$http_user_agent ：记录客户端浏览器的相关信息；
#   9、惊群现象：一个网路连接到来，多个睡眠的进程被同事叫醒，但只有一个进程能获得链接，这样会影响系统性能。
#   10、每个指令必须有分号结束。


==========location用法===================
    [语法]  location [=|~*|^~|@]/uri/{…}
    location会尝试根据用户请求中的uri来匹配上面的uri表达式，如果可以匹配，就选择lcoation块中的配置来处理用户请求。当然，匹配方式是多样的。
    =  表示完全匹配
    ~  表示匹配URI时时大小写敏感的
    ~* 表示匹配URI时忽略大小写
    ^~ 表示匹配URI时只需要其前半部分匹配即可
    @  表示仅用于Nginx服务内部请求之间的重定向
    location是有顺序的，如果一个请求有可能被多个location匹配，实际上这个请求会被匹配度最高的一个location处理。
    最后：location / {}会处理所有的请求。


==========root和alias用法的区别：=================
location /img/ {
    alias /var/www/image/;
}
#若按照上述配置的话，则访问/img/目录里面的文件时，nginx会自动去/var/www/image/目录找文件
location /img/ {
    root /var/www/image;
}
#若按照这种配置的话，则访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。]



=========如何获取用户的真实ip===============================
问题背景：
在实际应用中，我们可能需要获取用户的ip地址，比如做异地登陆的判断，或者统计ip访问次数等，通常情况下我们使用request.getRemoteAddr()就可以获取到客户端ip，但是当我们使用了nginx作为反向代理后，使用request.getRemoteAddr()获取到的就一直是nginx服务器的ip的地址，那这时应该怎么办？

part1：解决方案
我在查阅资料时，有一本名叫《实战nginx》的书，作者张晏，这本书上有这么一段话“经过反向代理后，由于在客户端和web服务器之间增加了中间层，
因此web服务器无法直接拿到客户端的ip，通过$remote_addr变量拿到的将是反向代理服务器的ip地址”。这句话的意思是说，当你使用了nginx反向服务器后，
在web端使用request.getRemoteAddr()（本质上就是获取$remote_addr），取得的是nginx的地址，即$remote_addr变量中封装的是nginx的地址，
当然是没法获得用户的真实ip的，但是，nginx是可以获得用户的真实ip的，也就是说nginx使用$remote_addr变量时获得的是用户的真实ip，
如果我们想要在web端获得用户的真实ip，就必须在nginx这里作一个赋值操作，如下：

proxy_set_header            X-real-ip $remote_addr;

其中这个X-real-ip是一个自定义的变量名，名字可以随意取，这样做完之后，用户的真实ip就被放在X-real-ip这个变量里了，然后，在web端可以这样获取：

request.getAttribute("X-real-ip")

这样就明白了吧。


=========Nginx开启Gzip压缩大幅提高页面加载速度================================================
# 开启gzip压缩服务
gzip on;

# gzip压缩是要申请临时内存空间的，假设前提是压缩后大小是小于等于压缩前的。
# 例如，如果原始文件大小为10K，那么它超过了8K，所以分配的内存是8 * 2 = 16K;再例如，
# 原始文件大小为18K，很明显16K也是不够的，那么按照 8 * 2 * 2 = 32K的大小申请内存。
# 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。

# 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。
# 例如 4 4k 代表以4k为单位，按照原始数据大小以4k为单位的4倍申请内存。
# 4 8k 代表以8k为单位，按照原始数据大小以8k为单位的4倍申请内存。
# 如果没有设置，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。
gzip_buffers 2 8k;

# nginx对于静态文件的处理模块。
# 该模块可以读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗。
# 该模块启用后，nginx首先检查是否存在请求静态文件的gz结尾的文件，如果有则直接返回该gz文件内容。
# 为了要兼容不支持gzip的浏览器，启用gzip_static模块就必须同时保留原始静态文件和gz文件。
# 这样的话，在有大量静态文件的情况下，将会大大增加磁盘空间。我们可以利用nginx的反向代理功能实现只保留gz文件。
gzip_static on|off

# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
gzip_min_length 1k;

# gzip压缩基于的http协议版本，默认就是HTTP 1.1
gzip_http_version 1.1;

# gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明
gzip_comp_level 2;

# 需要进行gzip压缩的Content-Type的Header的类型。建议js、text、css、xml、json都要进行压缩；
# 图片就没必要了，gif、jpge文件已经压缩得很好了，就算再压，效果也不好，而且还耗费cpu。
# javascript有多种形式。其中的值可以在 mime.types 文件中找到。
gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;

# 默认值：off
# Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。
# off - 关闭所有的代理结果数据的压缩
# expired - 启用压缩，如果header头中包含 "Expires" 头信息
# no-cache - 启用压缩，如果header头中包含 "Cache-Control:no-cache" 头信息
# no-store - 启用压缩，如果header头中包含 "Cache-Control:no-store" 头信息
# private - 启用压缩，如果header头中包含 "Cache-Control:private" 头信息
# no_last_modified - 启用压缩,如果header头中不包含 "Last-Modified" 头信息
# no_etag - 启用压缩 ,如果header头中不包含 "ETag" 头信息
# auth - 启用压缩 , 如果header头中包含 "Authorization" 头信息
# any - 无条件启用压缩
gzip_proxied [off|expired|no-cache|no-store|private|no_last_modified|no_etag|auth|any] ...

# 是否在http header中添加Vary: Accept-Encoding，建议开启
# 和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，
# 有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩
gzip_vary on;

# 禁用IE 6 gzip
gzip_disable "MSIE [1-6]\.";

用curl测试Gzip是否成功开启
curl -I -H "Accept-Encoding: gzip, deflate" "http://www.slyar.com/blog/"




========nginx静态文件缓存的解决方案===================================================
##cache##
proxy_connect_timeout 500;
#跟后端服务器连接的超时时间_发起握手等候响应超时时间
proxy_read_timeout 600;
#连接成功后_等候后端服务器响应的时间_其实已经进入后端的排队之中等候处理
proxy_send_timeout 500;
#后端服务器数据回传时间_就是在规定时间内后端服务器必须传完所有数据
proxy_buffer_size 128k;
#代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可
proxy_buffers 4 128k;
#同上 告诉Nginx保存单个用的几个Buffer最大用多大空间
proxy_busy_buffers_size 256k;
#如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2
proxy_temp_file_write_size 128k;
#proxy缓存临时文件的大小
proxy_temp_path /usr/local/nginx/temp;
#用于指定本地目录来缓冲较大的代理请求
proxy_cache_path /usr/local/nginx/cache levels=1:2 keys_zone=cache_one:200m inactive=15d max_size=200g;
#设置web缓存区名为cache_one,内存缓存空间大小为12000M，自动清除超过15天没有被访问过的缓存数据，硬盘缓存空间大小200g

http{
    ......
    proxy_cache_path /data/nginx/tmp-test levels=1:2 keys_zone=tmp-test:100m inactive=7d max_size=1000g;
}

proxy_cache_path    缓存文件路径
levels              设置缓存文件目录层次；levels=1:2 表示两级目录
keys_zone           设置缓存名字和共享内存大小
inactive            在指定时间内没人访问则被删除
max_size            最大缓存空间，如果缓存空间满，默认覆盖掉缓存时间最长的资源。
当配置好之后，重启nginx，如果不报错，则配置的proxy_cache会生效
查看  proxy_cache_path /data/nginx/目录，会发现生成了tmp-test文件夹。
